"""
AI Sales Assistant Conversation Engine
This module handles the conversation flow and response generation for the tourism sales assistant.
It integrates ChatGPT (via LangChain Community) and LlamaIndex.
Before running, create a file named .env in the same directory with the following content:
   OPENAI_API_KEY=YOUR_OPENAI_API_KEY_HERE
"""

from dotenv import load_dotenv
load_dotenv()  # This loads environment variables from .env

import re
import json
import logging
from typing import Dict, List, Optional, Any
from enum import Enum

# Updated import statements from langchain-community
from langchain_core.messages import HumanMessage, AIMessage
from langchain_openai import ChatOpenAI

# Import your database schema definitions
from database_schema import PriceDatabase, TourPackage, TourVariant, PriceOption, TransferOption

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------------
# Conversation State Machine
# ---------------------------
class ConversationState(Enum):
    GREETING = "greeting"
    GATHERING_INFO = "gathering_info"
    RECOMMENDING = "recommending"
    PRESENTING_DETAILS = "presenting_details"
    HANDLING_OBJECTION = "handling_objection"
    BOOKING = "booking"
    UPSELLING = "upselling"
    CLOSING = "closing"

# ---------------------------
# Customer Profile
# ---------------------------
class CustomerProfile:
    def __init__(self):
        self.emirate: Optional[str] = None
        self.group_size: Optional[int] = None
        self.children_count: int = 0
        self.children_ages: List[int] = []
        self.budget_preference: Optional[str] = None  # low, medium, high
        self.interests: List[str] = []
        self.selected_tour: Optional[str] = None
        self.selected_variant: Optional[str] = None
        self.name: Optional[str] = None
        self.language: str = "ru"  # Default language is Russian

    def to_dict(self) -> Dict[str, Any]:
        return {
            "emirate": self.emirate,
            "group_size": self.group_size,
            "children_count": self.children_count,
            "children_ages": self.children_ages,
            "budget_preference": self.budget_preference,
            "interests": self.interests,
            "selected_tour": self.selected_tour,
            "selected_variant": self.selected_variant,
            "name": self.name,
            "language": self.language
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'CustomerProfile':
        profile = cls()
        profile.emirate = data.get("emirate")
        profile.group_size = data.get("group_size")
        profile.children_count = data.get("children_count", 0)
        profile.children_ages = data.get("children_ages", [])
        profile.budget_preference = data.get("budget_preference")
        profile.interests = data.get("interests", [])
        profile.selected_tour = data.get("selected_tour")
        profile.selected_variant = data.get("selected_variant")
        profile.name = data.get("name")
        profile.language = data.get("language", "ru")
        return profile

# ---------------------------
# Conversation Context
# ---------------------------
class ConversationContext:
    def __init__(self):
        self.state: ConversationState = ConversationState.GREETING
        self.customer: CustomerProfile = CustomerProfile()
        self.prev_messages: List[Dict[str, str]] = []
        self.last_recommendations: List[str] = []
        self.pending_questions: List[str] = []
        self.session_id: Optional[str] = None
    
    def add_message(self, role: str, content: str) -> None:
        self.prev_messages.append({"role": role, "content": content})
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "state": self.state.value,
            "customer": self.customer.to_dict(),
            "prev_messages": self.prev_messages,
            "last_recommendations": self.last_recommendations,
            "pending_questions": self.pending_questions,
            "session_id": self.session_id
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ConversationContext':
        context = cls()
        context.state = ConversationState(data.get("state", ConversationState.GREETING.value))
        context.customer = CustomerProfile.from_dict(data.get("customer", {}))
        context.prev_messages = data.get("prev_messages", [])
        context.last_recommendations = data.get("last_recommendations", [])
        context.pending_questions = data.get("pending_questions", [])
        context.session_id = data.get("session_id")
        return context

# ---------------------------
# Response Generator
# ---------------------------
class ResponseGenerator:
    """
    Generates responses based on conversation context.
    It can use ChatGPT (via LangChain Community) and/or LlamaIndex for a more natural response.
    """
    def __init__(self, price_db: PriceDatabase, use_chatgpt: bool = False, use_llama_index: bool = False):
        self.price_db = price_db
        self.templates = self._load_templates()
        self.use_chatgpt = use_chatgpt
        self.use_llama_index = use_llama_index

        if self.use_chatgpt:
            self.llm = ChatOpenAI(model_name="gpt-4-turbo")

        if self.use_llama_index:
            # Comment out LlamaIndex functionality for now
            # documents = [
            #     Document(text="You are a professional tourism sales assistant. Respond in Russian with a friendly tone."),
            #     Document(text="Offer tour recommendations based on customer interests."),
            #     Document(text="Handle pricing objections gracefully and suggest upsell options."),
            #     Document(text="Guide customers to book tours when ready.")
            # ]
            # self.index = GPTVectorStoreIndex.from_documents(documents)
            pass  # Skip LlamaIndex integration

    def _load_templates(self) -> Dict[str, Dict[str, str]]:
        return {
            "greeting": {
                "initial": (
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏—é TripUAE. "
                    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ñ–∞—Å–º–∏–Ω–∞, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É!üòä\n\n"
                    "–í –∫–∞–∫–æ–º —ç–º–∏—Ä–∞—Ç–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∏ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ?"
                ),
                "return_visitor": "–†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
            },
            "gather_info": {
                "emirate": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —ç–º–∏—Ä–∞—Ç–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.",
                "group_size": "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏?",
                "children": "–ë—É–¥—É—Ç –ª–∏ —Å –≤–∞–º–∏ –¥–µ—Ç–∏? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç.",
                "interests": "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –≥–æ—Ä–æ–¥—Å–∫–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏, –ø—É—Å—Ç—ã–Ω–Ω–æ–µ —Å–∞—Ñ–∞—Ä–∏, –∫—Ä—É–∏–∑—ã –∏–ª–∏ –¥—Ä—É–≥–æ–µ?"
            },
            "recommendations": {
                "intro": "–ò—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                "desert_safari": "üèú –ü—É—Å—Ç—ã–Ω–Ω–æ–µ –¥–∂–∏–ø-—Å–∞—Ñ–∞—Ä–∏ ‚Äì –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Å—á–∞–Ω—ã–º –¥—é–Ω–∞–º —Å —É–∂–∏–Ω–æ–º –∏ —à–æ—É.",
                "dubai_city": "üèô –û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –î—É–±–∞—é ‚Äì –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏.",
                "night_cruise": "üö§ –ù–æ—á–Ω–æ–π –∫—Ä—É–∏–∑ –ø–æ –î—É–±–∞–π –ú–∞—Ä–∏–Ω–µ ‚Äì —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å —É–∂–∏–Ω–æ–º –∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏."
            },
            "tour_details": {
                "desert_safari": {
                    "emotional_intro": (
                        "–û–∫—É–Ω–∏—Ç–µ—Å—å –≤ –º–∞–≥–∏—é –∞—Ä–∞–≤–∏–π—Å–∫–æ–π –ø—É—Å—Ç—ã–Ω–∏, –≥–¥–µ –∑–æ–ª–æ—Ç—ã–µ –ø–µ—Å–∫–∏ –∏ –∑–∞–∫–∞—Ç —Å–æ–∑–¥–∞—é—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É."
                    ),
                    "program": (
                        "–í–∞—Å –∂–¥–µ—Ç –∫–∞—Ç–∞–Ω–∏–µ –ø–æ –¥—é–Ω–∞–º, –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ –≤–µ—Ä–±–ª—é–¥–∞—Ö, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã –∏ —à–æ—É —Å —É–∂–∏–Ω–æ–º-–±–∞—Ä–±–µ–∫—é."
                    ),
                    "variant_intro": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
                },
                "dubai_city": {
                    "emotional_intro": (
                        "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –î—É–±–∞–π ‚Äì –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–≤, –≥–¥–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π."
                    ),
                    "program": (
                        "–≠–∫—Å–∫—É—Ä—Å–∏—è –≤–∫–ª—é—á–∞–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–µ –ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞, –î—É–±–∞–π –ú–æ–ª–ª, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
                    ),
                    "variant_intro": "–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
                },
                "night_cruise": {
                    "emotional_intro": (
                        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–µ—á–µ—Ä –ø–æ–¥ –∑–≤–µ–∑–¥–∞–º–∏ –Ω–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –ª–æ–¥–∫–µ, –ø–ª—ã–≤—É—â–µ–π –ø–æ –º–µ—Ä—Ü–∞—é—â–µ–π –î—É–±–∞–π –ú–∞—Ä–∏–Ω–µ."
                    ),
                    "program": (
                        "–ö—Ä—É–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç —É–∂–∏–Ω, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–µ –≤–∏–¥—ã –Ω–æ—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."
                    ),
                    "variant_intro": "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
                }
            },
            "objection_handling": {
                "price_high": (
                    "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—ã—Å–æ–∫–æ–π. –ù–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–∏–¥–∞, –±–∏–ª–µ—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å. "
                    "–ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∫–∏–¥–∫–∏."
                ),
                "thinking": (
                    "–ü–æ–Ω–∏–º–∞—é, —Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–≥—É –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ, –ø–æ–∫–∞ –≤—ã –æ–±–¥—É–º—ã–≤–∞–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
                ),
                "alternatives": (
                    "–ï—Å–ª–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
                ),
                "pricing_inquiry": (
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞. –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –ø—Ä–µ–º–∏—É–º –∏–ª–∏ VIP?"
                )
            },
            "booking": {
                "confirmation": "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä—É—é –¥–ª—è –≤–∞—Å –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é.",
                "date_request": "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏? (TUAE)",
                "processing": "–Ø –æ—Ñ–æ—Ä–º–ª—è—é –≤–∞—à—É –±—Ä–æ–Ω—å, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                "success": "–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä TripUAE."
            },
            "upsell": {
                "intro": "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –µ—â–µ –±–æ–ª–µ–µ –æ—Å–æ–±–µ–Ω–Ω—ã–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:",
                "burj_khalifa": (
                    "–¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ç—É—Ä –ø–æ–¥—ä–µ–º–æ–º –Ω–∞ —Å–º–æ—Ç—Ä–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É –ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞ ‚Äì —É–≤–∏–¥–µ—Ç—å –≥–æ—Ä–æ–¥ —Å –≤—ã—Å–æ—Ç—ã –∑–∞ $55."
                ),
                "aquarium": (
                    "–ø–æ—Å–µ—Ç–∏—Ç—å –∞–∫–≤–∞—Ä–∏—É–º –≤ –î—É–±–∞–π –ú–æ–ª–ª–µ ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ—Ç—å –±–æ–ª–µ–µ 33 000 –º–æ—Ä—Å–∫–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –∑–∞ $35."
                )
            },
            "not_available": (
                "–ú–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
                "–Ø —á—É—Ç—å –ø–æ–∑–∂–µ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º. –í—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤? (TUAE)"
            )
        }

    def _assemble_prompt(self, context: ConversationContext, user_message: str) -> str:
        prompt = "You are a professional tourism sales assistant. Respond in Russian with a friendly, professional tone.\n\n"
        prompt += "Conversation History:\n"
        for msg in context.prev_messages:
            prompt += f"{msg['role'].capitalize()}: {msg['content']}\n"
        prompt += f"User: {user_message}\n\n"
        prompt += "Based on this, provide a helpful and informative answer."
        return prompt

    def generate_response(self, context: ConversationContext, user_message: str) -> str:
        context.add_message("user", user_message)
        logger.info("Processing user message: %s", user_message)
        
        # If using ChatGPT integration, try that first
        if self.use_chatgpt:
            prompt = self._assemble_prompt(context, user_message)
            try:
                chat_response = self.llm.invoke(prompt)
                response_text = chat_response.content.strip()
                context.add_message("assistant", response_text)
                logger.info("ChatGPT response: %s", response_text)
                return response_text
            except Exception as e:
                logger.error("Error during ChatGPT invocation: %s", e)
        
        # If using LlamaIndex integration, try that next
        if self.use_llama_index:
            # Comment out for now
            # prompt = self._assemble_prompt(context, user_message)
            # try:
            #     index_result = self.index.query(prompt)
            #     response_text = index_result.strip()
            #     context.add_message("assistant", response_text)
            #     logger.info("LlamaIndex response: %s", response_text)
            #     return response_text
            # except Exception as e:
            #     logger.error("Error during LlamaIndex query: %s", e)
            pass  # Skip LlamaIndex integration
        
        # Fallback: use internal logic
        self._extract_emirate(context, user_message)
        self._extract_group_size(context, user_message)
        self._extract_interests(context, user_message)
        self._check_tour_selection(context, user_message)
        intents = self._determine_intent(user_message)
        if intents["objection"]:
            context.state = ConversationState.HANDLING_OBJECTION
        elif intents["booking"] and context.customer.selected_tour:
            context.state = ConversationState.BOOKING
        elif intents["pricing_inquiry"]:
            context.state = ConversationState.HANDLING_OBJECTION
        self._update_conversation_state(context)
        logger.info("Updated conversation state: %s", context.state.value)
        
        if context.state == ConversationState.GREETING:
            response = self._handle_greeting(context)
        elif context.state == ConversationState.GATHERING_INFO:
            response = self._handle_gathering_info(context)
        elif context.state == ConversationState.RECOMMENDING:
            response = self._handle_recommending(context)
        elif context.state == ConversationState.PRESENTING_DETAILS:
            response = self._handle_presenting_details(context)
        elif context.state == ConversationState.HANDLING_OBJECTION:
            response = self._handle_objection(context, user_message)
        elif context.state == ConversationState.BOOKING:
            response = self._handle_booking(context, user_message)
        elif context.state == ConversationState.UPSELLING:
            response = self._handle_upsell(context, user_message)
        elif context.state == ConversationState.CLOSING:
            response = self._handle_closing(context)
        else:
            response = self.templates["not_available"]
        
        context.add_message("assistant", response)
        return response

    def _determine_intent(self, message: str) -> Dict[str, bool]:
        message_lower = message.lower()
        intents = {
            "booking": bool(re.search(r"\b(–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|book|reserve|reservation)\b", message_lower)),
            "objection": bool(re.search(r"\b(–¥–æ—Ä–æ–≥–æ|—Ü–µ–Ω–∞\s?–≤—ã—Å–æ–∫|—Å–ª–∏—à–∫–æ–º|expensive|cost|–¥–µ—à–µ–≤–ª–µ|cheaper)\b", message_lower)),
            "pricing_inquiry": bool(re.search(r"\b(—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞)\b", message_lower))
        }
        logger.info("Detected intents: %s", intents)
        return intents

    def _extract_emirate(self, context: ConversationContext, message: str) -> None:
        patterns = {
            "dubai": r"\b(–¥—É–±–∞–π|dubai|–¥—É–±–∞–∏)\b",
            "abu_dhabi": r"\b(–∞–±—É\s?-?–¥–∞–±–∏|abu\s?dhabi)\b",
            "sharjah": r"\b(—à–∞—Ä–¥–∂–∞|sharjah)\b",
            "ajman": r"\b(–∞–¥–∂–º–∞–Ω|ajman)\b",
            "ras_al_khaimah": r"\b(—Ä–∞—Å\s?-?–∞–ª—å\s?-?—Ö–∞–π–º–∞|ras\s?al\s?khaimah)\b",
            "fujairah": r"\b(—Ñ—É–¥–∂–µ–π—Ä–∞|fujairah)\b"
        }
        for emirate, pattern in patterns.items():
            if re.search(pattern, message.lower()):
                context.customer.emirate = emirate
                logger.info("Extracted emirate: %s", emirate)
                break

    def _extract_group_size(self, context: ConversationContext, message: str) -> None:
        size_patterns = [
            (r"\b(\d+)\s+(—á–µ–ª–æ–≤–µ–∫|–ª—é–¥–µ–π|–≤–∑—Ä–æ—Å–ª—ã—Ö|–≥–æ—Å—Ç–µ–π)\b", lambda x: int(x)),
            (r"\b(–æ–¥–∏–Ω|–æ–¥–Ω–∞|1)\b", lambda x: 1),
            (r"\b(–¥–≤–∞|–¥–≤–µ|2)\b", lambda x: 2),
            (r"\b(—Ç—Ä–∏|3)\b", lambda x: 3),
            (r"\b(—á–µ—Ç—ã—Ä–µ|4)\b", lambda x: 4),
            (r"\b(–ø—è—Ç—å|5)\b", lambda x: 5),
            (r"\b(—à–µ—Å—Ç—å|6)\b", lambda x: 6),
            (r"\b(—Å–µ–º—å|7)\b", lambda x: 7),
            (r"\b(–Ω–∞—Å|–≥—Ä—É–ø–ø–∞)\s+(\d+)\b", lambda x: int(x))
        ]
        msg_lower = message.lower()
        for pattern, converter in size_patterns:
            match = re.search(pattern, msg_lower)
            if match:
                context.customer.group_size = converter(match.group(1))
                logger.info("Extracted group size: %s", context.customer.group_size)
                break

        child_patterns = [
            (r"\b(\d+)\s+(—Ä–µ–±–µ–Ω–∫–∞|–¥–µ—Ç–µ–π|—Ä–µ–±–µ–Ω–æ–∫|–¥–∏—Ç—è)\b", lambda x: int(x)),
            (r"\b—Å\s+(—Ä–µ–±–µ–Ω–∫–æ–º|–¥–µ—Ç—å–º–∏)\b", lambda x: 1),
            (r"\b–≤–æ–∑—Ä–∞—Å—Ç–æ–º\s+(\d+)\b", lambda x: int(x)),
            (r"\b(\d+)\s+(–≥–æ–¥–∞|–ª–µ—Ç)\b", lambda x: int(x))
        ]
        for pattern, converter in child_patterns:
            for m in re.finditer(pattern, msg_lower):
                if m.groups():
                    age = converter(m.group(1))
                    if age <= 18:
                        context.customer.children_count += 1
                        context.customer.children_ages.append(age)
                        logger.info("Detected child with age: %s", age)

    def _extract_interests(self, context: ConversationContext, message: str) -> None:
        interest_patterns = {
            "desert_safari": r"\b(–ø—É—Å—Ç—ã–Ω|—Å–∞—Ñ–∞—Ä–∏|desert|–¥–∂–∏–ø)\b",
            "city_tour": r"\b(–≥–æ—Ä–æ–¥|—Å–∏—Ç–∏|–æ–±–∑–æ—Ä–Ω|tour|—ç–∫—Å–∫—É—Ä—Å–∏)\b",
            "cruise": r"\b(–∫—Ä—É–∏–∑|—è—Ö—Ç|boat|marina)\b",
            "adventure": r"\b(–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏|–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω|–≤–µ—Ä—Ç–æ–ª–µ—Ç)\b",
            "attractions": r"\b(–º—É–∑–µ–π|–ø–∞—Ä–∫|–±–∏–ª–µ—Ç|–∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω|–±—É—Ä–¥–∂|khalifa)\b"
        }
        msg_lower = message.lower()
        for interest, pattern in interest_patterns.items():
            if re.search(pattern, msg_lower):
                if interest not in context.customer.interests:
                    context.customer.interests.append(interest)
                    logger.info("Extracted interest: %s", interest)

    def _check_tour_selection(self, context: ConversationContext, message: str) -> None:
        tour_patterns = {
            "desert_jeep_safari": r"\b(–ø—É—Å—Ç—ã–Ω–Ω–æ–µ\s?—Å–∞—Ñ–∞—Ä–∏|desert\s?safari)\b",
            "night_cruise": r"\b(–∫—Ä—É–∏–∑|–Ω–æ—á–Ω–æ–π\s?–∫—Ä—É–∏–∑|marina\s?cruise)\b",
            "dubai_city_tour": r"\b(–æ–±–∑–æ—Ä–Ω–∞—è\s?—ç–∫—Å–∫—É—Ä—Å–∏—è|city\s?tour|dubai\s?tour|—Å–∏—Ç–∏\s?—Ç—É—Ä)\b"
        }
        msg_lower = message.lower()
        for tour_id, pattern in tour_patterns.items():
            if re.search(pattern, msg_lower):
                context.customer.selected_tour = tour_id
                context.state = ConversationState.PRESENTING_DETAILS
                logger.info("Selected tour: %s", tour_id)
                break
        
        if context.customer.selected_tour:
            variant_patterns = {
                "standard": r"\b(—Å—Ç–∞–Ω–¥–∞—Ä—Ç|basic)\b",
                "premium": r"\b(–ø—Ä–µ–º–∏—É–º|premium|—É–ª—É—á—à–µ–Ω–Ω)\b",
                "vip": r"\b(–≤–∏–ø|vip|–ª—é–∫—Å|luxury)\b"
            }
            for variant_id, pattern in variant_patterns.items():
                if re.search(pattern, msg_lower):
                    context.customer.selected_variant = variant_id
                    logger.info("Selected variant: %s", variant_id)
                    break

    def _update_conversation_state(self, context: ConversationContext) -> None:
        if context.state == ConversationState.GREETING:
            context.state = ConversationState.GATHERING_INFO
        
        if (context.state == ConversationState.GATHERING_INFO and 
            context.customer.emirate is not None and 
            context.customer.group_size is not None):
            context.state = ConversationState.RECOMMENDING
        
        if context.customer.selected_tour and context.state == ConversationState.RECOMMENDING:
            context.state = ConversationState.PRESENTING_DETAILS

    def _handle_greeting(self, context: ConversationContext) -> str:
        if len(context.prev_messages) > 2:
            return self.templates["greeting"]["return_visitor"]
        return self.templates["greeting"]["initial"]

    def _handle_gathering_info(self, context: ConversationContext) -> str:
        if context.customer.emirate is None:
            return self.templates["gather_info"]["emirate"]
        if context.customer.group_size is None:
            return self.templates["gather_info"]["group_size"]
        return self.templates["gather_info"]["interests"]

    def _handle_recommending(self, context: ConversationContext) -> str:
        recommendations = self._get_recommendations(context.customer)
        context.last_recommendations = recommendations
        response = self.templates["recommendations"]["intro"] + "\n\n"
        for rec_id in recommendations[:3]:
            if rec_id in self.templates["recommendations"]:
                response += self.templates["recommendations"][rec_id] + "\n\n"
        response += "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        return response

    def _get_recommendations(self, customer: CustomerProfile) -> List[str]:
        recs = []
        if "desert_safari" in customer.interests:
            recs.append("desert_jeep_safari")
        if "city_tour" in customer.interests:
            recs.append("dubai_city_tour")
        if "cruise" in customer.interests:
            recs.append("night_cruise")
        if not recs:
            if customer.emirate == "dubai":
                recs = ["desert_jeep_safari", "dubai_city_tour", "night_cruise"]
            elif customer.emirate == "abu_dhabi":
                recs = ["dubai_city_tour", "desert_jeep_safari"]
            else:
                recs = ["desert_jeep_safari", "dubai_city_tour"]
        return recs

    def _handle_presenting_details(self, context: ConversationContext) -> str:
        tour_id = context.customer.selected_tour
        if not tour_id or tour_id not in self.price_db.tours:
            context.state = ConversationState.RECOMMENDING
            return self._handle_recommending(context)
        
        tour = self.price_db.tours[tour_id]
        response = ""
        if tour_id in self.templates["tour_details"]:
            tdata = self.templates["tour_details"][tour_id]
            response += tdata["emotional_intro"] + "\n\n"
            response += tdata["program"] + "\n\n"
            if len(tour.variants) > 1:
                response += tdata["variant_intro"] + "\n\n"
                if context.customer.selected_variant and context.customer.selected_variant in tour.variants:
                    variant = tour.variants[context.customer.selected_variant]
                    response += self._format_variant_details(tour_id, context.customer.selected_variant, variant, context.customer)
                else:
                    for variant_id, variant in tour.variants.items():
                        if "private" in variant_id and (context.customer.group_size is None or context.customer.group_size > variant.min_participants):
                            continue
                        response += self._format_variant_details(tour_id, variant_id, variant, context.customer) + "\n\n"
        else:
            response += f"–≠–∫—Å–∫—É—Ä—Å–∏—è '{tour.name}' - {tour.description}\n\n"
            for variant_id, variant in tour.variants.items():
                response += self._format_variant_details(tour_id, variant_id, variant, context.customer) + "\n\n"
        
        if tour.upsell_suggestions:
            upsell_id = tour.upsell_suggestions[0]
            if upsell_id in self.templates["upsell"]:
                response += self.templates["upsell"]["intro"] + " " + self.templates["upsell"][upsell_id] + "\n\n"
        
        response += "–•–æ—Ç–µ–ª–∏ –±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é?"
        return response

    def _format_variant_details(self, tour_id: str, variant_id: str, variant: TourVariant, customer: CustomerProfile) -> str:
        emirate = customer.emirate or "dubai"
        pricing = None
        if emirate in variant.pricing:
            pricing = variant.pricing[emirate]
        elif f"{emirate}_no_transfer" in variant.pricing:
            pricing = variant.pricing[f"{emirate}_no_transfer"]
        elif "dubai" in variant.pricing:
            pricing = variant.pricing["dubai"]
        elif "dubai_no_transfer" in variant.pricing:
            pricing = variant.pricing["dubai_no_transfer"]
        if not pricing:
            return f"–í–∞—Ä–∏–∞–Ω—Ç: {variant.name}\n–¶–µ–Ω—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. {self.templates['not_available']}"
        
        result = f"–í–∞—Ä–∏–∞–Ω—Ç: {variant.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {variant.description}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {variant.duration}\n"
        result += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${pricing.adult_price} –∑–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ"
        if pricing.child_price is not None and (customer.children_count > 0 or customer.children_ages):
            result += f", ${pricing.child_price} –∑–∞ —Ä–µ–±–µ–Ω–∫–∞"
            if pricing.child_age_min is not None and pricing.child_age_max is not None:
                result += f" (–æ—Ç {pricing.child_age_min} –¥–æ {pricing.child_age_max} –ª–µ—Ç)"
        if pricing.infant_price is not None and pricing.infant_price == 0:
            result += f", –¥–µ—Ç–∏ –¥–æ {pricing.infant_age_max or 3} –ª–µ—Ç - –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        if pricing.notes:
            result += f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {pricing.notes}"
        
        inclusions = []
        if variant.includes_transfer:
            inclusions.append("—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä")
        if variant.includes_meals:
            inclusions.append("–ø–∏—Ç–∞–Ω–∏–µ")
        if inclusions:
            result += f"\n–í–∫–ª—é—á–µ–Ω–æ: {', '.join(inclusions)}"
        if variant.available_days and variant.available_days != ["daily"]:
            days_map = {
                "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
                "wednesday": "—Å—Ä–µ–¥—É",
                "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
                "friday": "–ø—è—Ç–Ω–∏—Ü—É",
                "saturday": "—Å—É–±–±–æ—Ç—É",
                "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
                "daily": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            }
            days_ru = [days_map.get(day, day) for day in variant.available_days]
            result += f"\n–î–æ—Å—Ç—É–ø–Ω–æ –≤: {', '.join(days_ru)}"
        return result

    def _handle_objection(self, context: ConversationContext, user_message: str) -> str:
        msg_lower = user_message.lower()
        if re.search(r"(–¥–æ—Ä–æ–≥–æ|—Ü–µ–Ω–∞\s?–≤—ã—Å–æ–∫|—Å–ª–∏—à–∫–æ–º|expensive|cost)", msg_lower):
            return self.templates["objection_handling"]["price_high"]
        elif re.search(r"(–ø–æ–¥—É–º–∞—é|–Ω–∞–¥–æ\s?–æ–±—Å—É–¥–∏—Ç—å|think\s?about\s?it|not\s?sure)", msg_lower):
            return self.templates["objection_handling"]["thinking"]
        elif re.search(r"(—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞)", msg_lower):
            return self.templates["objection_handling"]["pricing_inquiry"]
        else:
            return self.templates["objection_handling"]["alternatives"]

    def _handle_booking(self, context: ConversationContext, user_message: str) -> str:
        return self.templates["booking"]["date_request"]

    def _handle_upsell(self, context: ConversationContext, user_message: str) -> str:
        return self.templates["upsell"]["intro"] + " " + self.templates["upsell"]["burj_khalifa"]

    def _handle_closing(self, context: ConversationContext) -> str:
        return self.templates["booking"]["success"]